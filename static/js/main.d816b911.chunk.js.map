{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["window","onload","elems","document","querySelectorAll","M","Range","init","App","useState","rollLength","setRollLength","rollWidth","setRollWidth","wallHeight","setWallHeight","wallWidth","setWallWidth","rapport","setRapport","useEffect","console","log","className","placeholder","id","type","onChange","text","target","value","htmlFor","action","min","max","onClick","widthNeed","parseFloat","heightRequirement","lengthFromEachRoll","i","rest","Math","abs","alert","toFixed","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uOAMAA,OAAOC,OAAS,WACZ,IAAIC,EAASC,SAASC,iBAAiB,qBACvCC,IAAEC,MAAMC,KAAKL,IA4FFM,MAzFf,WAAgB,IAAD,EACyBC,mBAAS,IADlC,mBACJC,EADI,KACQC,EADR,OAEuBF,mBAAS,IAFhC,mBAEJG,EAFI,KAEOC,EAFP,OAGyBJ,mBAAS,IAHlC,mBAGJK,EAHI,KAGQC,EAHR,OAIuBN,mBAAS,IAJhC,mBAIJO,EAJI,KAIOC,EAJP,OAKmBR,mBAAS,IAL5B,mBAKJS,EALI,KAKKC,EALL,KAmCb,OA5BEC,qBAAU,WAAQC,QAAQC,IAAIJ,KAAW,CAACN,EAAWF,EAAYI,EAAYE,EAAWE,IA6B5F,yBAAKK,UAAU,aAGX,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,cAAf,oBACA,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,OAEX,yBAAKA,UAAU,0BACX,2BAAOC,YAAY,GAAGC,GAAG,cAAcC,KAAK,OAAOC,SAAU,SAAAC,GAAI,OAAIjB,EAAciB,EAAKC,OAAOC,UAC/F,2BAAOC,QAAQ,eAAf,wBAGJ,yBAAKR,UAAU,0BACX,2BAAOC,YAAY,GAAGC,GAAG,cAAcC,KAAK,OAAOC,SAAU,SAAAC,GAAI,OAAIf,EAAae,EAAKC,OAAOC,UAC9F,2BAAOC,QAAQ,eAAf,yBAKR,yBAAKR,UAAU,OACX,yBAAKA,UAAU,0BACX,2BAAOC,YAAY,GAAGC,GAAG,gBAAaC,KAAK,OAAOC,SAAU,SAAAC,GAAI,OAAIb,EAAca,EAAKC,OAAOC,UAC9F,2BAAOC,QAAQ,iBAAf,yBAGJ,yBAAKR,UAAU,0BACX,2BAAOC,YAAY,GAAGC,GAAG,cAAcC,KAAK,OAAOC,SAAU,SAAAC,GAAI,OAAIX,EAAaW,EAAKC,OAAOC,UAC9F,2BAAOC,QAAQ,eAAf,uBAGJ,yBAAKR,UAAU,0BACX,0BAAMS,OAAO,KACT,uBAAGT,UAAU,eACT,2BAAOQ,QAAQ,WAAf,gBACA,2BAAOL,KAAK,QAAQD,GAAG,UAAUQ,IAAI,IAAIC,IAAI,MAAMP,SAAU,SAAAC,GAAI,OAAIT,EAAWS,EAAKC,OAAOC,cAO5G,4BAAQP,UAAU,kBAAkBY,QAtE5C,WACId,QAAQC,IAAIZ,EAAYE,EAAWI,EAAWF,GAG9C,IAAIsB,EAAYC,WAAWrB,GAAaqB,WAAWzB,GAE/C0B,EAAoBD,WAAWvB,GAAcuB,WAAWnB,GAAS,IAEjEqB,EAAqBF,WAAW3B,GAAc4B,EAC9CE,EAAI,EAKR,IAHAnB,QAAQC,IAAIc,GACZf,QAAQC,IAAIiB,GAENH,EAAUG,EAAmBC,GAC/BA,IAGJ,IAAIC,EAAOC,KAAKC,IAAIP,EAAYG,EAAmBC,GAEnDI,MAAM,cAAD,OAAeJ,EAAf,yCAA8CC,EAAKI,QAAQ,GAA3D,QAkDD,WACI,uBAAGtB,UAAU,wBAAb,kBC9EIuB,QACW,cAA7B9C,OAAO+C,SAASC,UAEe,UAA7BhD,OAAO+C,SAASC,UAEhBhD,OAAO+C,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFjD,SAASkD,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxC,QAAQwC,MAAMA,EAAMC,a","file":"static/js/main.d816b911.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport './App.css';\n\nimport M from 'materialize-css'\nimport 'materialize-css/dist/css/materialize.min.css'\n\nwindow.onload = function() {\n    var elems  = document.querySelectorAll(\"input[type=range]\");\n    M.Range.init(elems);\n};\n\nfunction App() {\n    const [rollLength, setRollLength] = useState(\"\");\n    const [rollWidth, setRollWidth] = useState(\"\");\n    const [wallHeight, setWallHeight] = useState(\"\");\n    const [wallWidth, setWallWidth] = useState(\"\");\n    const [rapport, setRapport] = useState(\"\");\n\n    useEffect(() => { console.log(rapport)}, [rollWidth, rollLength, wallHeight, wallWidth, rapport])\n    function kalkuler(){\n        console.log(rollLength, rollWidth, wallWidth, wallHeight);\n\n\n        let widthNeed = parseFloat(wallWidth) / parseFloat(rollWidth);\n\n        let heightRequirement = parseFloat(wallHeight) + parseFloat(rapport)/100;\n\n        let lengthFromEachRoll = parseFloat(rollLength) / heightRequirement;\n        let i = 1;\n\n        console.log(widthNeed);\n        console.log(lengthFromEachRoll);\n\n        while(widthNeed>lengthFromEachRoll*i){\n            i++\n        }\n\n        let rest = Math.abs(widthNeed - lengthFromEachRoll*i);\n\n        alert(`Du trenger ${i} ruller, og har en rest på ${rest.toFixed(2)}m`)\n\n\n        //Check for errors on input\n        //calculate\n        //show result and difference.\n    }\n  return (\n<div className=\"container\">\n\n\n    <div className=\"card card-panel\">\n        <div className=\"card-title\">Tapet kalkulator</div>\n        <div className=\"card-content\">\n            <div className=\"row\">\n\n                <div className=\"input-field col s12 l6\">\n                    <input placeholder=\"\" id=\"rull_lengde\" type=\"text\" onChange={text => setRollLength(text.target.value)}/>\n                    <label htmlFor=\"Rull_lengde\">Rull lengde i meter</label>\n                </div>\n\n                <div className=\"input-field col s12 l6\">\n                    <input placeholder=\"\" id=\"rull_bredde\" type=\"text\" onChange={text => setRollWidth(text.target.value)}/>\n                    <label htmlFor=\"Rull_bredde\">Rull bredde i meter</label>\n                </div>\n\n            </div>\n\n            <div className=\"row\">\n                <div className=\"input-field col s12 l6\">\n                    <input placeholder=\"\" id=\"vegg_høyde\" type=\"text\" onChange={text => setWallHeight(text.target.value)} />\n                    <label htmlFor=\"vegg_høyde\">Vegghøyde i meter</label>\n                </div>\n\n                <div className=\"input-field col s12 l6\">\n                    <input placeholder=\"\" id=\"vegg_bredde\" type=\"text\" onChange={text => setWallWidth(text.target.value)}/>\n                    <label htmlFor=\"vegg_bredde\">Veggbredde i meter</label>\n                </div>\n\n                <div className=\"input-field col s12 l6\">\n                    <form action=\"#\">\n                        <p className=\"range-field\">\n                            <label htmlFor=\"rapport\">Rapport i cm</label>\n                            <input type=\"range\" id=\"rapport\" min=\"0\" max=\"100\" onChange={text => setRapport(text.target.value)}/>\n\n                        </p>\n                    </form>\n                </div>\n\n            </div>\n            <button className=\"btn waves-light\" onClick={kalkuler}>Kalkuler\n                <i className=\"material-icons right\">calculate</i>\n            </button>\n    </div>\n\n    </div>\n\n</div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}